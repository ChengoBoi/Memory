import tkinter as tk
from tkinter import messagebox, ttk
import random
import os

#Klass som inneh친ller alla funktioner f칬r Memory-spelet. Inklusive logik, gr칛nssnitt och highscore-hantering.
class MemoryGame:

    #Klassens konstrukt칬r. Initierar spelet genom att s칛tta upp n칬dv칛ndiga variabler och visa startlayouten.
    def __init__(self, f칬nster, ord_fil="memo.txt", highscore_fil="highscore.txt"): #Parameter. Tkinter-Widget. Referencer till objekt
        self.f칬nster = f칬nster #Huvudf칬nstret f칬r spelet
        self.ord_fil = ord_fil  #Fil f칬r ordlistan
        self.highscore_fil = highscore_fil  #Fil f칬r highscores
        self.namn = ""  #Spelarens namn
        self.matris = []  #Spelbr칛dsmatrisen. Inneh친ller en lista av rader
        self.synlig = []  #Sp친rar vilka rutor som 칛r synliga
        self.knappar = []  #Knappar f칬r spelmatrisen
        self.f칬rs칬k = 0  #R칛knar antal f칬rs칬k spelaren k칬r
        self.hittade_par = 0  #Antal matchade par
        self.storlek = (0, 0)  #Storlek p친 spelmatrisen (rader, kolumner)
        self.totala_par = 0  #Totala antalet par i spelet
        self.f칬rsta_val = None  #Koordinater f칬r f칬rsta valda rutan
        self.l친st = False  #F칬r att f칬rhindra snabba klick
        self.startlayout()  #Visa startlayouten

    #Visar startlayouten d칛r spelaren kan ange sitt namn och v칛lja storlek p친 spelbr칛det.
    def startlayout(self):

        tk.Label(self.f칬nster, text="游꿡V칛lkommen till spelet Memory!游꿡", font=("Arial", 16)).pack(pady=15)
        tk.Label(self.f칬nster, text="Ange ditt namn:").pack()
        namn_entry = tk.Entry(self.f칬nster)
        namn_entry.pack(pady=5)

        tk.Label(self.f칬nster, text="V칛lj storlek (t.ex. 4x3):").pack()
        storlek_entry = tk.Entry(self.f칬nster)
        storlek_entry.pack(pady=5)

        #Felhantering vid inl칛sning av anv칛ndarens data
        def starta_spel():
            namn = namn_entry.get().strip() #Tar bort o칬diga mellanslag
            if not namn:
                messagebox.showerror("Error", "Du m친ste f칬rst ange ett namn!")
                return

            storlek_text = storlek_entry.get().strip()
            try:
                if "x" not in storlek_text:
                    raise ValueError("Storleken m친ste anges i formatet 3x4 eller 4x3")

                rader, kolumner = storlek_text.split("x")
                if not rader.isdigit() or not kolumner.isdigit():
                    raise ValueError("B친de rader och kolumner m친te vara heltal")
                
                rader, kolumner = int(rader), int(kolumner)

                if rader*kolumner %2 !=0:
                    raise ValueError("Matrisstolek m친ste vara j칛mn")
                
                if rader*kolumner //2 > self.l칛s_max_ord():
                    raise ValueError(f"Matrisstorleken kr칛ver fler ord 칛n vad som finns ({self.l칛s_max_ord()} par)!")
            except ValueError as e:
                messagebox.showerror("Error", f"Ogiltig storlek: {e}")
                return

            #Sparar v칛rden i instansvariabler. Anropar. 
            self.namn = namn 
            self.storlek = (rader, kolumner)
            self.totala_par = (rader * kolumner) // 2
            self.initiera_spel()

        start_knapp = tk.Button(self.f칬nster, text="Starta spelet", command=starta_spel)
        start_knapp.pack(pady=15)

        highscore_knapp = tk.Button(self.f칬nster, text="Visa Highscore", command=self.visa_highscore_popup)
        highscore_knapp.pack(pady=20)

    #L칛ser in det maximala antalet ord fr친n ordlistfilen.
    def l칛s_max_ord(self):
        try:
            with open(self.ord_fil, 'r') as f:
                return len(f.readlines()) #l칛ser alla rader i filen och returnerar en lista d칛r varje element 칛r en rad i filen.
        except FileNotFoundError:
            messagebox.showerror("Fel", f"Filen '{self.ord_fil}' hittades inte.")
            self.f칬nster.quit() #F칬rhindra att spelet forts칛tter utan ord.

    #Initierar spelet genom att l칛sa ordlistan, skapa spelmatrisen och bygga gr칛nssnittet.
    def initiera_spel(self):
        ordlista = self.l칛s_ord()
        self.skapa_matris(ordlista)
        self.bygg_gr칛nssnitt()

    #L칛ser antal rader i ordlistfilen
    def l칛s_ord(self):
        try:
            with open(self.ord_fil, 'r', encoding='utf-8') as f:
                ordlista = [rad.strip() for rad in f.readlines()]
            return random.sample(ordlista, self.totala_par) * 2
        except FileNotFoundError:
            messagebox.showerror("Fel", f"Filen '{self.ord_fil}' hittades inte.")
            self.f칬nster.quit()

    #Skapar en matris f칬r spelet genom att slumpa och arrangera orden i rader och kolumner.
    def skapa_matris(self, ordlista):
        random.shuffle(ordlista)
        rader, kolumner = self.storlek #H칛mtar antalet rader och kolumner fr친n self.storlek.
        self.matris = [ordlista[i * kolumner:(i + 1) * kolumner] for i in range(rader)] #H칛mtar listan som motsvarar en hel rad i spelbr칛dan.
        self.synlig = [[False] * kolumner for _ in range(rader)] #Inga rutor 칛r synliga vid spelstart

    #Bygger gr칛nssnittet f칬r spelet med knappar f칬r varje cell.
    def bygg_gr칛nssnitt(self):
        for widget in self.f칬nster.winfo_children(): #Returnerar en lista 칬ver alla widgetar som redan finns i f칬nstret.
            widget.destroy()

        self.knappar = []
        rader, kolumner = self.storlek
        for rad in range(rader):
            rad_knappar = []
            for kol in range(kolumner):
                knapp = tk.Button(
                    self.f칬nster, text="---", width=10, height=3,
                    command=lambda r=rad, k=kol: self.vald_ruta(r, k) #Lambda anv칛nds f칬r att passera rad och kolumn till vald_ruta.
                )
                knapp.grid(row=rad, column=kol)
                rad_knappar.append(knapp)
            self.knappar.append(rad_knappar)

    #Hanterar spelarens klick p친 en ruta, visar ordet och kontrollerar om det bildar ett par.
    def vald_ruta(self, rad, kol):
        if self.l친st or self.synlig[rad][kol]:
            return

        self.synlig[rad][kol] = True
        self.knappar[rad][kol].config(text=self.matris[rad][kol]) #Uppdaterar knappens text med det ord som finns i motsvarande position i matrisen.

        if not self.f칬rsta_val:
            self.f칬rsta_val = (rad, kol)
        else:
            self.l친st = True
            self.f칬nster.after(1000, lambda: self.utv칛rdera_par(rad, kol))

    #Utv칛rderar om de tv친 valda rutorna bildar ett par och hanterar resultatet
    def utv칛rdera_par(self, rad2, kol2):
        if not self.f칬rsta_val:
            return

        rad1, kol1 = self.f칬rsta_val #H칛mtar koordinaterna fr친n f칬rsta valet

        if self.matris[rad1][kol1] == self.matris[rad2][kol2]:
            self.hittade_par += 1
            if self.hittade_par == self.totala_par:
                self.avsluta_spel()
        else: #Om de inte matchar v칛nder sig korten
            self.synlig[rad1][kol1] = False
            self.synlig[rad2][kol2] = False
            self.knappar[rad1][kol1].config(text="---")
            self.knappar[rad2][kol2].config(text="---")

        self.f칬rsta_val = None
        self.l친st = False
        self.f칬rs칬k += 1

    #Skriver grattis och sparar highscore
    def avsluta_spel(self):
        messagebox.showinfo("Grattis, du har klarat av spelet!", f"Du lyckades matcha alla ord p친 {self.f칬rs칬k+1} f칬rs칬k!")
        self.spara_highscore()
        self.visa_highscore_popup()

    #Sparar spelarens resultat i highscore-filen.
    def spara_highscore(self):
        rader, kolumner = self.storlek
        ny_rad = f"{self.namn},{self.f칬rs칬k+1},{rader}x{kolumner}\n"

        if not os.path.exists(self.highscore_fil):
            with open(self.highscore_fil, 'w') as f:
                f.write(ny_rad)
        else:
            with open(self.highscore_fil, 'a') as f:
                f.write(ny_rad)

    #Visar highscore-listan i ett nytt popup-f칬nster efter spelets slut.
    def visa_highscore_popup(self):
        popup = tk.Toplevel(self.f칬nster)
        popup.title("Highscore listan")

        tree = ttk.Treeview(popup, columns=("Namn", "Antal f칬rs칬k", "Storlek"), show="headings")
        tree.heading("Namn", text="Namn")
        tree.heading("Antal f칬rs칬k", text="Antal f칬rs칬k")
        tree.heading("Storlek", text="Storlek")

        with open(self.highscore_fil, 'r') as f:
            highscore_data = f.readlines()

        highscores = []
        for rad in highscore_data:
            namn, f칬rs칬k, storlek = rad.strip().split(",")
            rader, kolumner = map(int, storlek.split("x"))
            sv친righet = rader * kolumner
            highscores.append((int(f칬rs칬k), sv친righet, namn, storlek))

        highscores.sort()

        for f칬rs칬k, sv친righet, namn, storlek in highscores:
            tree.insert("", "end", values=(namn, f칬rs칬k, storlek))

        tree.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)

        #Avslutar spelet
        def st칛ng_och_avsluta():
            popup.destroy()
            self.f칬nster.quit()

        close_btn = tk.Button(popup, text="Avsluta spelet", command=st칛ng_och_avsluta)
        close_btn.pack(pady=5)

#Skapar olika instanser av Tkinter
if __name__ == "__main__":
    huvud_f칬nster = tk.Tk() #Skapar huvudf칬nster f칬r GUI 
    huvud_f칬nster.title("Memory-spel") #S칛tter titeln p친 huvudf칬nstret till "Memory-spel".
    spel = MemoryGame(huvud_f칬nster)
    huvud_f칬nster.mainloop()
